Shaarli for Debian
------------------

Shaarli can be downloaded from its webpage:
http://sebsauvage.net/wiki/doku.php?id=php:shaarli

The regular download link looks like this:
http://sebsauvage.net/files/shaarli_0.0.33beta.zip

However, that archive is not suitable for Debian packaging. In particular,
it includes minified JavaScript files for jQuery, and not the actual sources.
This is in violation of DFSG ยง2. However, I've worked with upstream to get
this rectified. There is thus a specific archive made for Debian packaging,
where the jQuery files are removed, and jQuery's CDN is used instead. Those
archives (using the same version number) are to be found at the following
location:
http://sebsauvage.net/files/for_debian/shaarli_0.0.33beta.tar.gz

The debian/watch file has been adapted to download the Debian-specific
tarball (note that the original archive is a zipfile)

Packaging a new version
-----------------------

shaarli is maintained using git-buildpackage. This file documents the steps
needed to package a new upstream version.

One-time setup steps: get your copy of the Debian source package from Git, and
the Debian files for the latest package:
  $ git clone ssh://<user>@git.debian.org/git/collab-maint/shaarli.git
  $ git checkout -b pristine-tar remotes/origin/pristine-tar
  $ git checkout -b upstream remotes/origin/upstream
  $ apt-get source shaarli

From inside the shaarli folder:
1. Retrieve the new upstream tarball and update the new upstream source into
the git repository:
  $ git-import-orig --pristine-tar --uscan

2. Update the debian/changelog file to document the new version. Hint: you can
copy the file ../shaarli-<new_version>/debian/changelog that was
automatically updated by the previous step.

3. Build the package:
  $ git-buildpackage --git-pristine-tar --git-ignore-new

4. Before uploading the new package, make sure to build the package at least
once in a chroot environment:
  $ sudo pbuilder --update
  $ BUILDER=pbuilder git-buildpackage --git-pbuilder --git-pristine-tar --git-ignore-new

5. When you are fine with the new package, upload it to Debian.

6. Don't forget to commit your changes, tag the new Debian version and push
everything back up to the Debian Git repository:
  $ git commit -a
  $ git-buildpackage --git-tag
  $ git push --all

Thanks for updating the package!

 -- Emilien Klein <emilien+debian@klein.st>  Sat, 25 May 2013 20:46:07 +0200

